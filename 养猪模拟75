#include<iostream>
#include<stdlib.h>
#include<ctime>
#include<cstring>
#include<fstream>
#include<conio.h>
using namespace std;
ifstream fin;
ofstream fout;
enum operation{Searchsty=1,Searchpig,Searchvariety,PrintBuySell,quit};
int months[13]={0,31,28,31,30,31,30,31,31,30,31,30,31};
const int MAXP=1000;
int B_num,S_num1,S_num2,B_sty=0,S_sty=0,Sum,sum=0,B_sum=0,S_sum=0,B_total=0,S_total=0,times=0,getvirus=0,day=0,deadpig=0,virusday=0,order;
char ch;
float ratio=0.0;
struct pig{
	 string variety;
	double weight;
	int time;
	int sty;
	int number;
	bool virus;
	int virus_time;
	pig *next;
};
struct Buy{
	int Bnumber_B;
	int Bnumber_S1;
	int Bnumber_S2;
	bool BUY;
};
struct Sell{
	int Snumber_B;
	int Snumber_S1;
	int Snumber_S2; 
	double money_;
	bool SELL;
};
Buy buy[20]={0};
Sell sell[20]={0};
int Sty[100][12]={0};
pig *Alive=NULL,*Dead=NULL;
operation Menu(); 
int B_initial(pig*);
int S_initial(pig*,int);
pig* pass(pig*);
pig* InsertPig(pig *,pig *);
pig* SellPig(pig *);
pig* SearchPig(pig *); 
pig* StorePig(pig* );
void PrintList(pig *);
void SearchS();
void SearchV();
void SearchP();
void PrintBS();
void SaveData(pig *);
pig *LoadData(pig *);
pig *Virus(pig *);
bool canvirus(pig *);
int B_initial(pig *x){
	int a=Sty[0][10],b=0,i; 
	x->variety="黑猪"; 
	x->time=0;
	x->virus=0;
	x->virus_time=0;
		for(i=0;i<B_sty;i++){
				if(Sty[i][10]<a){
					a=Sty[i][10];
					b=i;
				}
			}
		x->sty=b;
		Sty[b][10]++;
		for(int i=0;i<10;i++){
			if(Sty[b][i]==0){
				x->number=i;
				Sty[b][i]=1;
				i=10;
			}
		}
		return 1;	
}
int S_initial(pig *x,int y){
	int a=Sty[B_sty][10],b=B_sty,i;
	if(y==1) x->variety="大花白猪";
	else x->variety="小花猪"; 
	x->time=0;
	x->virus=0;
	x->virus_time=0;
		for(i=B_sty;i<100;i++){
				if(Sty[i][10]<a){
					a=Sty[i][10];
					b=i;
				}
			}
		x->sty=b;
		Sty[b][10]++;
		for(int i=0;i<10;i++){
			if(Sty[b][i]==0){
				x->number=i;
				Sty[b][i]=1;
				i=10;
			}
		}
		return 1;
}
pig * pass(pig *Alive){
	pig *p=Alive;
	int v;
	while(p!=NULL){			
		double y=((double)rand()/RAND_MAX)*(1.2-0.0) +0.0;
		p->weight+=y;
		p->time++;
		v=(rand()%10000)+1;
		if(v<=Sty[p->sty][11]){
			getvirus=1;
			p->virus=1;
			for(int i=0;i<100;i++)
				Sty[i][11]=0; 
			Sty[p->sty][11]=5000;
			if(p->sty==0&&Sty[1][11]!=5000) Sty[1][11]=1500;
			else if(p->sty==99&&Sty[98][11]!=5000) Sty[98][11]=1500;
			else {
				if(Sty[p->sty-1][11]!=5000)Sty[p->sty-1][11]=1500;
				if(Sty[p->sty+1][11]!=5000)Sty[p->sty+1][11]=1500;
			}
		}
		p=p->next; 
	}
	day++;
	return Alive;
}
pig *InsertPig(pig *Alive,pig *x){
	pig *p,*q;
	p=Alive;
	if(Alive==NULL){
		Alive=x;
		x->next=NULL;
		x->number=0;
	} 
	else {
		while((x->sty>p->sty) && (p->next!=NULL)){		
			q=p; 
	 		p=p->next;
		}
		 if(x->sty<=p->sty) 
  {	  if(Alive==p) 
	  { Alive=x;        
		 x->next=p;
	 } 	  
	  else 
	  { q->next=x;
		x->next=p;         
	  }  	  
  } 
  else  
  {  p->next=x;   
     x->next=NULL;
  } 
	return Alive; 
}
}
pig *StorePig(pig *Alive){
	for(int i=0;i<B_num;i++){
		pig* New=new pig;
		int j=B_initial(New);
		New->weight=((double)rand()/RAND_MAX)*(50.0-20.0)+20.0;
		Alive=InsertPig(Alive,New);
	}
		for(int i=0;i<S_num2;i++){
			pig *New=new pig;
			int j=S_initial(New,2);
			New->weight=((double)rand()/RAND_MAX)*(50.0-20.0)+20.0;
			Alive=InsertPig(Alive,New);
		}
		for(int i=0;i<S_num1;i++){
			pig *New=new pig;
			int j=S_initial(New,1);
			New->weight=((double)rand()/RAND_MAX)*(50.0-20.0)+20.0;
			Alive=InsertPig(Alive,New);
		}
	return Alive;	
	} 	
pig* SellPig(pig *Alive){
	 
	cout<<"交易中...\n";
	pig *p,*q,*temp1,*temp2;
	int a=0,b=0,c=0;
	double d=0,e=0,f=0,money=0;
	p=Alive;
	if(Alive==NULL){
		cout<<"你的猪场里没有猪了！\n";
		return Alive; 
	} 
	while(p!=NULL){
		if(p->time>365||p->weight>75){
			temp1=p->next;
			temp2=p;
			if(p->variety=="黑猪"){
				a++;
				d=d+p->weight;
				Sty[p->sty][10]--;
				Sty[p->sty][p->number]=0;
			}
			else if(p->variety=="大花白猪"){
				b++;
				e+=p->weight;	
				Sty[p->sty][10]--;
				Sty[p->sty][p->number]=0;
			}
			else {
				c++;
				f+=p->weight;
				Sty[p->sty][10]--;
				Sty[p->sty][p->number]=0;
			}
			if(p==Alive){
				Alive=p->next;
				delete p;
				p=Alive;
			}
			else {
				q->next=p->next;
				delete p;
				p=q->next;
			}
		}
		else {
			q=p;
			p=p->next;
		} 
	}
	money=d*30+e*12+f*14;
	money=int(money*100);
	money/=100;
	cout<<"共卖出"<<a<<"只黑猪，"<<b<<"只大花白猪，"<<c<< "只小花猪\n";
	cout<<"此次出售赚"<<money<<"元\n";
	sell[times].money_=money;
	sell[times].Snumber_B=a;
	sell[times].Snumber_S1=b;
	sell[times].Snumber_S2=c;
	sell[times].SELL=1;
	sum=sum-a-b-c;
	B_sum=B_sum-a;
	S_sum=S_sum-b-c;
	return Alive;
}
void PrintList(pig *Alive){
	pig *p;
	p=Alive;
	if (Alive==NULL)cout<<"空链表"<<endl; 
	else while (p!=NULL){
		cout<<p->variety<<"储存在"<<p->sty<<"号猪圈中，编号为"<<p->number<<",体重为"<<p->weight<<endl;
		p=p->next;
	}
}
operation  Menu(){  
	int choice;
   cout<<endl<<endl;
   cout<<"今天是第"<<day<<"天\n";
   cout<<"猪圈操作菜单"<<endl;
   cout<<"1 查询猪圈信息"<<endl;
   cout<<"2 查找某一只猪信息"<<endl;
   cout<<"3 查找猪种类信息"<<endl;
   cout<<"4 查询近5年猪的销售记录和猪崽儿的购入记录"<<endl;
   cout<<"其他数字键 退出"<<endl;
   cout<<endl<<endl<<"请输入功能序号";
   cin>>choice;
   return operation(choice);

}
void SearchS(){
	if(Alive==NULL){
		cout<<"你没有猪了！\n";
		return;
	}
	cout<<"输入需要查询的猪圈:\n";
	int a,b=0,c=0;
	string x="0",y="0";
	cin>>a;
	while(a<0||a>99) {
		cout<<"无此猪圈，请重新输入\n";
		cin>>a;
	}
	if(Sty[a][10]==0){
		cout<<"该猪圈中没有猪！\n";
		return;
	}
	pig *p=Alive;
	while(p!=NULL){
		if(p->sty!=a);
		else {
			if(x=="0") {
				x=p->variety;
				b++;
			}
			else if(x==p->variety)b++;
			else if(x!=p->variety&&y=="0") {
				y=p->variety;
				c++;
			}	
			else if(y==p->variety)	c++;
		}
		p=p->next;
	}
	if(y=="0")cout<<"该猪圈中有"<<b<<"只"<<x<<endl;
	else cout<< "该猪圈中有"<<b<<"只"<<x<<","<<c<<"只"<<y<<endl;
	return; 
}
void SearchP(){
	pig *p=Alive;
	if(Alive==NULL){
		cout<<"你没有猪了！\n";
		return;
	} 
	cout<<"请输入猪所在猪圈编号以及猪编号\n猪圈编号:";
	int a,b;
	cin>>a;
	cout<<"\n猪编号:";
	cin>>b; 
	while(a<0||a>99||b<0||b>9){
		cout<<"编号有误，请重新输入";
		cout<<"\n猪圈编号:";
		cin>>a;
		cout<<"\n猪编号:";
		cin>>b; 
	} 
	while(p!=NULL){
		if(p->sty==a&&p->number==b){
			cout<<"该猪为"<<p->variety<<",体重为"<<p->weight<<"千克,已饲养" <<p->time<<"天\n";
			return;
		}
		p=p->next;
	}
	cout<<"查无此猪...\n"; 
}
void SearchV(){
	pig *p=Alive;
	if(Alive==NULL){
		cout<<"你没有猪了！\n";
		return;
	} 
	string a;
	int i=0;
	cout<<"输入要查询的猪的种类:\n";
	cin>>a;
	while(p!=NULL){
		if(p->variety==a){
			i++;
			cout<<"猪"<<i<<"在"<<p->sty<<"号猪圈中,编号为"<<p->number;
			cout<<",体重为"<<p->weight<<",已饲养了"<<p->time<<"天\n"; 
		}
		p=p->next;
	} 
}
void PrintBS(){
	for(int i=0;buy[i].BUY!=0;i++){
		cout<<"第"<<i+1<<"次的购买记录为:\n";
		cout<<buy[i].Bnumber_B<<"只黑猪，"<<buy[i].Bnumber_S1<<"只大花白猪，"<<buy[i].Bnumber_S2<<"只小花猪\n\n"; 
	}
	cout<<endl;
	for(int i=0;sell[i].SELL!=0;i++){
		cout<<"第"<<i+1<<"次的出售记录为:\n";
		cout<<sell[i].Snumber_B<<"只黑猪，"<<sell[i].Snumber_S1<<"只大花白猪，"<<sell[i].Snumber_S2<<"只小花猪\n";
		cout<<"此次出售共赚"<<sell[i].money_<<"元\n\n";
	}
}
void SaveData(pig *Alive){
	pig *p=Alive,*q;
	fout.open("Alive.txt");
	while(p!=NULL){
		q=p->next;
		fout<<p->sty<<" "<<p->number<<" "<<p->variety<<" "<<p->weight<<" "<<p->time<<endl;
		delete p;
		p=q;
	}
	fout<<-1;
	fout.close();
	fout.open("sty.txt");
	for(int i=0;i<100;i++){
		for(int j=0;j<12;j++){
			fout<<Sty[i][j]<<" ";
		} 
		fout<<endl;
	}
	fout.close();
	fout.open("buy and sell.txt"); 
	for(int i=0;i<20&&buy[i].BUY!=0;i++){
		fout<<buy[i].Bnumber_B<<" "<<buy[i].Bnumber_S1<<" "<<buy[i].Bnumber_S2<<" "<<buy[i].BUY<<endl;
	}
	fout<<-1<<endl;
	for(int i=0;i<20&&sell[i].SELL!=0;i++){
		fout<<sell[i].money_<<" "<<sell[i].Snumber_B<<" "<<sell[i].Snumber_S1<<" "<<sell[i].Snumber_S2<<" "<<sell[i].SELL<<endl;
	}
	fout<<-1<<endl;
	fout.close() ;
	fout.open("other.txt");
	fout<<B_sty<<" "<<S_sty<<" "<<sum<<" "<<B_sum<<" "<<S_sum<<" "<<B_total<<" "<<S_total<<" "<<times<<" "<<day;
	fout.close();
}
pig *LoadData(pig *Alive) {
	fin.open("Alive.txt");
	pig *p,*q;
	p=new pig;
	fin>>p->sty;
	if(p->sty<0){
		cout<<"猪圈中没有猪了\n";
		Alive=NULL;
	}
	else{
		fin>>p->number>>p->variety>>p->weight>>p->time;
		Alive=p;
		p->next=NULL;
		q=p;
		while(1){
			p=new pig;
			fin>>p->sty;
			if(p->sty<0){
				delete p;
				break;
			}
			else {
				fin>>p->number>>p->variety>>p->weight>>p->time;
				q->next=p;
				q=p;
				p->next=NULL; 
			}
		}
	}
	fin.close();
	fin.open("sty.txt");
	for(int i=0;i<100;i++){
		for(int j=0;j<12;j++){
			fin>>Sty[i][j];
		}
	}
	fin.close();
	fin.open("buy and sell.txt");
	for(int i=0;i<20;i++){
		fin>>buy[i].Bnumber_B;
		if(buy[i].Bnumber_B<0)break;
		fin>>buy[i].Bnumber_S1>>buy[i].Bnumber_S2>>buy[i].BUY;
	}
	for(int i=0;i<20;i++){
		fin>>sell[i].money_;
		if(sell[i].money_<0)break;
		fin>>sell[i].Snumber_B>>sell[i].Snumber_S1>>sell[i].Snumber_S2>>sell[i].SELL;
	}
	fin.close();
	fin.open("other.txt");
	fin>>B_sty>>S_sty>>sum>>B_sum>>S_sum>>B_total>>S_total>>times>>day;
	fin.close();
	return Alive;
}
pig *Virus(pig *Alive){
	pig *p=Alive,*q;
	while(p!=NULL){
		if(!p->virus){
		int v=rand()%(10000)+1;
			if(v<=Sty[p->sty][11]){
				p->virus=1;
				Sty[p->sty][11]=5000;
				if(p->sty==0&&Sty[1][11]!=5000) Sty[1][11]=1500;
				else if(p->sty==99&&Sty[98][11]!=5000) Sty[98][11]=1500;
				else {
					if(Sty[p->sty-1][11]!=5000)Sty[p->sty-1][11]=1500;
					if(Sty[p->sty+1][11]!=5000)Sty[p->sty+1][11]=1500;
				}
			}
			q=p;
			p=p->next;	
		}
		else if(p->virus){
			if(p->virus_time==7){
				deadpig++;
				if(p==Alive){
					Alive=p->next;
					delete p;
					q=p=Alive;
				}
				else{
					q->next=p->next;
					delete p;
					p=q->next;
				}
			}
			else {
				p->virus_time++;
				q=p;
				p=p->next;
		} 
	}
	}
	virusday++;
	return Alive;

}
bool canvirus(pig *Alive){
	pig *p=Alive,*q;
	q=p;
	p=p->next;
	while(p!=0){
		if(p->sty-q->sty<=1);
		else return 0;
		q=p;
		p=p->next;
	}
	return 1;
}
int main(){
	srand((unsigned)time(NULL));
	char is_virus;
	fin.open("Alive.txt");
	if(!fin.is_open()){
		fin.close();
	}
	else {
		fin.close();
		Alive=LoadData(Alive);
		goto loop;
	}
		cout<<"是否要模拟猪瘟？(按Y确认/按N取消)";
		cin>>is_virus;
		if(is_virus=='n'||is_virus=='N')
			cout<<"取消猪瘟模拟，猪将不会感染瘟疫\n";
		else if(is_virus=='y'||is_virus=='Y'){
			cout<<"开始猪瘟模拟，初始情况下(没有猪感染瘟疫)每头猪每天有0.01%的概率感染瘟疫,猪得病后会在一周后死亡\n";
			for(int i=0;i<100;i++){
				Sty[i][11]=9000;
			}
		} 
		else cout<<"输入错误，将不会有猪感染瘟疫\n";
begin:	cout<<"请输入需要购买的黑猪、大花白猪、小花猪的数量："<<endl<<"黑猪数量：";
	cin>>B_num;
	cout<<"大花白猪数量：";
	cin>>S_num1;
	cout<<"小花猪数量："; 
	cin>>S_num2;
	sum=B_num+S_num1+S_num2,S_sum=S_num1+S_num2,B_sum=B_num;
	system("cls");
	while(sum>MAXP){
		cout<<"你无法饲养这么多猪！\n";
		cout<<"请重新输入需要购买的黑猪、大花白猪、小花猪的数量："<<endl<<"黑猪数量：";
		cin>>B_num;
		cout<<"大花白猪数量：";
		cin>>S_num1;
		cout<<"小花猪数量："; 
		cin>>S_num2;
		sum=B_num+S_num1+S_num2,S_sum=S_num1+S_num2,B_sum=B_num; 
		system("cls");
	}
	buy[0].Bnumber_B=B_num;
	buy[0].Bnumber_S1=S_num1;
	buy[0].Bnumber_S2=S_num2;
	buy[0].BUY=1;
	ratio=B_num;
	ratio=ratio/sum;
	B_sty=ratio*100;
	if(B_sty==0)B_sty=1;
	if(B_sty==100)B_sty=99;
	B_total=B_sty*10;
	S_sty=100-B_sty;
	S_total=S_sty*10;
	if(B_total<B_sum||S_total<S_sum){
		cout<<"有猪无法放入猪圈，请重新考虑购买猪的数量；\n";
		goto begin;
	}
	Alive=StorePig(Alive);
	cout<<"养猪场已建立\n"; 
	PrintList(Alive);
	cout<<"按任意键来开始养猪\n"; 
	ch=getch(); 
	system("cls"); 
loop:	long start=clock(),end;
		while(!kbhit()){
			if(((end=clock())-start)/CLOCKS_PER_SEC>=1){
				start=end;
				system("cls");
				Alive=pass(Alive);
				cout<<"按任意键来暂停天数以查询信息\n"; 
				cout<<"今天是第"<<day<<"天\n";
				if(getvirus==1){
					cout<<"有猪在今天得病了\n";
					goto plague ;
				}
				if(day%90==0){
					Alive=SellPig(Alive);
					if(times<20)times++;
					else times=0;
					cout<<"请输入需要购买的黑猪、大花白猪、小花猪的数量："<<endl<<"黑猪数量：";
					cin>>B_num;
					cout<<"大花白猪数量：";
					cin>>S_num1;
					cout<<"小花猪数量："; 
					cin>>S_num2;
					sum=sum+B_num+S_num1+S_num2;
					S_sum=S_sum+S_num1+S_num2;
					B_sum=B_sum+B_num;
					while(sum>MAXP||B_sum>B_total||S_sum>S_total){
						system("cls");
						sum=sum-B_num-S_num1-S_num2;
						S_sum=S_sum-S_num1-S_num2;
						B_sum=B_sum-B_num;
							cout<<"你无法饲养这么多猪！\n";
							cout<<"请重新输入需要购买的黑猪、大花白猪、小花猪的数量："<<endl<<"黑猪数量：";
						cin>>B_num;
						cout<<"大花白猪数量：";
						cin>>S_num1;
						cout<<"小花猪数量："; 
						cin>>S_num2;
						sum=B_num+S_num1+S_num2; 
					}
					buy[times].Bnumber_B=B_num;
					buy[times].Bnumber_S1=S_num1;
					buy[times].Bnumber_S2=S_num2;
					buy[times].BUY=1;
					Alive=StorePig(Alive);
					PrintList(Alive); 
					cout<<"按任意键继续\n";
					ch=getch();
					system("cls");
			}
		} 
	}
		system("cls"); 
		ch=getch();
		cout<<"今天是第"<<day<<"天\n";
		cout<<"输入1来查询猪场相关信息;\n";
		cout<<"或输入2结束程序\n";	
		cin>>order;
		system("cls");
		if(order==1);
	else if(order==2) {
		cout<<"结束程序\nBye";
		goto end;
	}
	else {
		cout<<"输入错误;\n";
		goto loop;
	}
	operation menu_choice;  
  do 
  {
   menu_choice=Menu(); 
   switch(menu_choice) 
   {
      case Searchsty: cout<<"1 查询猪圈信息"<<endl<<endl;
		               SearchS(); 
					    break;
	  case  Searchpig: cout<<"2 查找某一只猪信息"<<endl<<endl;
                       SearchP();
					   break;
      case  Searchvariety: cout<<"3 查找猪种类信息"<<endl<<endl;
                       SearchV();
					    break; 
	  case  PrintBuySell:  cout<<"4 查询近5年猪的销售记录和猪崽儿的购入记录"<<endl;
	  					PrintBS();
	  					break;
	  case	quit : 
	  default:   	cout<<"结束查询"<<endl;
	  				cout<<"猪圈继续运营"<<endl;
	  				goto loop;
  		 }   
  		 cout<<"按任意键继续\n";
  		 ch=getch();
  		 system("cls");
	}while(menu_choice!=quit);
plague:		cout<<"是否进行隔离？(y进行/n不进行)\n" ; 
			cin>>is_virus;
			system("cls");
			if(is_virus=='n'||is_virus=='N'){
				if(!canvirus(Alive)){
					cout<<"有猪无法被感染";
					goto Return; 
				}
				while(deadpig!=sum)
					Alive=Virus(Alive);
			cout<<"猪将在"<<virusday<<"天后死光";
			goto Return;
			}
			
end:   		SaveData(Alive);
Return:		return 0;
}
